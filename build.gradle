plugins {
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.minecrell.licenser' version '0.4.1'
	id "org.ajoberstar.grgit" version "3.1.1"
	id 'com.jfrog.bintray' version '1.8.4'
	id 'patchwork-api.module-conventions'
}

def ENV = System.getenv()

version = project.baseVersion //+ "+" + (ENV.BUILD_NUMBER ? ("build." + ENV.BUILD_NUMBER) : "local") + "-" + getBranch()

logger.lifecycle("Building Patchwork: " + version)

def getSubprojectVersion(project, version) {
	if (grgit == null) {
		return version + "+nogit"
	}
	def latestCommits = grgit.log(paths: [project.name], maxCommits: 1)
	if (latestCommits.isEmpty()) {
		return version + "+uncommited"
	} else {
		return version + "+" + latestCommits.get(0).id.substring(0, 8)
	}
}

def getBranch() {
	if (System.getenv().GIT_BRANCH) {
		def branch = System.getenv().GIT_BRANCH
		return branch.substring(branch.lastIndexOf("/") + 1)
	}
	if (grgit == null) {
		return "unknown"
	}
	def branch = grgit.branch.current().name
	return branch.substring(branch.lastIndexOf("/") + 1)
}

javadoc {
	options.memberLevel = "PACKAGE"
	allprojects.each {
		source(it.sourceSets.main.allJava.srcDirs)
	}
	classpath = sourceSets.main.compileClasspath
}

bintray {
	user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : System.getenv('bintray_user')
	key = project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : System.getenv('bintray_key')
	publish = true
	override = true
	publications = ['mavenJava']
	pkg {
		repo = project.bintrayRepo
		name = project.name
		user = bintray.user
		userOrg = project.repoOwner
		licenses = [project.codeLicense]
		desc = project.description
		websiteUrl = "https://github.com/${project.repoOwner}/${project.repoName}"
		issueTrackerUrl = "https://github.com/${project.repoOwner}/${project.repoName}/issues"
		vcsUrl = "https://github.com/${project.repoOwner}/${project.repoName}.git"
		publicDownloadNumbers = true

		githubRepo = "${project.repoOwner}/${project.repoName}"
		version {
			name = project.version
			released = new Date()
		}
	}

	javadoc.enabled = false
}

task remapMavenJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: jar) {
	afterEvaluate {
		input = file("${project.buildDir}/libs/${archivesBaseName}-${version}-dev.jar")
		archiveName = "${archivesBaseName}-${version}-maven.jar"
		addNestedDependencies = false
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}-maven.jar")) {
				builtBy remapMavenJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
			pom.withXml {
				def depsNode = asNode().appendNode("dependencies")
				subprojects.each {
					def depNode = depsNode.appendNode("dependency")
					depNode.appendNode("groupId", it.group)
					depNode.appendNode("artifactId", it.name)
					depNode.appendNode("version", it.version)
					depNode.appendNode("scope", "compile")
				}
			}
		}
	}
}

task licenseFormatAll

repositories {
	flatDir {
		dirs 'jars'
	}
	mavenCentral()
	maven { url 'https://dl.bintray.com/patchworkmc/Patchwork-Maven/' }
}

dependencies {
	minecraft "com.mojang:minecraft:$project.mcVersion"
	mappings "net.fabricmc:yarn:${project.mcVersion}${project.yarnVersion}:v2"
	modImplementation "net.fabricmc:fabric-loader:0.10.0+build.208"
	modImplementation "net.fabricmc.fabric-api:fabric-api:0.15.1+build.260-1.14"

	implementation 'com.electronwill.night-config:toml:3.6.2'
	include 'com.electronwill.night-config:core:3.6.2'
	include 'com.electronwill.night-config:toml:3.6.2'
	include 'net.patchworkmc:patchwork-eventbus:2.0.0:all'
}


task copyIdeaFiles(type: Copy) {
	if (file(".idea/").exists()) {
		from "idea-docs/"
		into ".idea/"
	}
}

copyIdeaFiles
