plugins {
//	id 'java'
//	id 'eclipse'
//	id 'idea'
	id 'checkstyle'
	id 'maven-publish'
	id 'fabric-loom'
	id 'net.minecrell.licenser' //version '0.4.1'
	id 'com.jfrog.bintray' //version '1.8.4'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "net.patchworkmc.patchwork-api"

loom {
	shareCaches = true
}

repositories {
	maven { url 'https://dl.bintray.com/patchworkmc/Patchwork-Maven/' }
}

dependencies {
	minecraft "com.mojang:minecraft:$rootProject.mcVersion"
	mappings "net.fabricmc:yarn:${rootProject.mcVersion}${rootProject.yarnVersion}:v2"
	modImplementation "net.fabricmc:fabric-loader:0.10.0+build.208"
	modImplementation "net.fabricmc.fabric-api:fabric-api:0.15.1+build.260-1.14"

	implementation 'net.patchworkmc:patchwork-eventbus:2.0.1:all'
	implementation 'com.google.code.findbugs:jsr305:3.0.2'

	// For EventBus
	implementation 'net.jodah:typetools:0.6.0'
}

configurations {
	dev
}

jar {
	classifier = "dev"
}

afterEvaluate {
	remapJar {
		input = file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar")
		archiveName = "${archivesBaseName}-${version}.jar"
	}

	artifacts {
		dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: jar
	}

	processResources {
		inputs.property "version", project.version

		from(project.sourceSets.main.resources.srcDirs) {
			include "fabric.mod.json"
			expand "version": project.version
		}

		from(project.sourceSets.main.resources.srcDirs) {
			exclude "fabric.mod.json"
		}
	}

	license {
		header rootProject.file('HEADER')
		include '**/*.java'
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from project.sourceSets.main.allSource
}

checkstyle {
	configFile = rootProject.file("checkstyle.xml")
	toolVersion = '8.36.2'
}
